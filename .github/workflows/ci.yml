name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Rust testing and linting
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        override: true

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-

    - name: Install protoc
      uses: arduino/setup-protoc@v3
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check formatting
      run: cargo fmt -- --check
      
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run tests
      run: cargo test --verbose --all-features
      
    - name: Build release
      run: cargo build --release --features="lsm6dsl lis3mdl bmp388"
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.rust == 'stable'
      with:
        name: navigate-sensorhub-${{ github.sha }}
        path: target/release/navigate_sensorhub

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install cargo-audit
      run: cargo install --force cargo-audit
      
    - name: Run security audit
      run: cargo audit

  # Docker build and test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=commit-
          
    - name: Build Docker image for testing (linux/amd64 only)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Test Docker image
      run: |
        # Test that the binary exists and shows help
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --help || true

        # Test container structure
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ls -la /usr/local/bin/
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ls -la /app/
        
    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Create GitHub release for tags
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, docker, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: navigate-sensorhub-${{ github.sha }}
        path: artifacts/
        
    - name: Create release archive
      run: |
        cd artifacts
        tar -czf navigate-sensorhub-linux-x64.tar.gz navigate_sensorhub
        cd ..
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/navigate-sensorhub-linux-x64.tar.gz
          docker-compose.yml
          config/sensors.toml
          config/buses.toml
        body: |
          ## Navigate SensorHub Release ${{ github.ref_name }}
          
          ### Features
          - High-performance sensor streaming via gRPC
          - Multi-sensor support: IMU, Magnetometer, Barometer
          - Docker deployment ready
          - Structured error handling with comprehensive diagnostics
          
          ### Installation
          ```bash
          # Docker deployment (recommended)
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/docker-compose.yml
          docker compose up -d
          
          # Native binary
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/navigate-sensorhub-linux-x64.tar.gz
          tar -xzf navigate-sensorhub-linux-x64.tar.gz
          sudo ./navigate_sensorhub
          ```
          
          ### Testing
          ```bash
          # Test with sensor-reader client
          cargo install --git https://github.com/your-org/sensor-reader-test
          sensor-reader-test --grpc imu http://localhost:50051
          ```
        draft: false
        prerelease: false
        generate_release_notes: true
        
    - name: Update CLAUDE.md
      run: |
        echo "## Latest Release: ${{ github.ref_name }}" >> RELEASE_NOTES.md
        echo "Built: $(date -u)" >> RELEASE_NOTES.md
        echo "Commit: ${{ github.sha }}" >> RELEASE_NOTES.md